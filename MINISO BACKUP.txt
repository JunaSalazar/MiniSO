// ---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Unit1.h"
#include <string>
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <stdio.h>
using namespace std;
bool entrada = true;
int p_actual[6];
int memoria = 1;
int cpu = 1;
int t_actual;
int nuevo_proceso;
int proceso_desplegado;
vector<int>ready;
vector<int>blocked;
vector<int>running;
vector<int>llegada;
vector<int>envejecimiento;
vector<int>cpu_restante;
vector<int>quantum_restante;
vector<int>tiempo_total;
vector<int>fila;
vector<vector<int> > pagina;
vector<vector<vector<int> > > proceso;
int max_pa;

// ---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;

// ---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner) : TForm(Owner) {
}
// ---------------------------------------------------------------------------


void muestraDespliegue(){
	int select = proceso_desplegado;
	Form1->Nombre->Caption = proceso_desplegado+1;
	Form1->Llegada->Caption = llegada[select];
	Form1->Envejecimiento->Caption = envejecimiento[select];
	Form1->Cpu_restante->Caption = cpu_restante[select];
	Form1->Quantum_restante->Caption = quantum_restante[select];
}

// Este va sumando uno por uno el envejecimiento de los procesos que estén en Ready.
void sumaEnvejecimiento() {
	for (int x = 0; x < ready.size(); x++) {
		envejecimiento[ready[x] - 1]++;
	}
}

void desplegarRunning() {
	if (!running.empty()) {
		// VARIABLES LOCALES
		int select = (running[0]) - 1;
		// VARIABLES LOCALES

		Form1->Nombre->Caption = running[0];
		Form1->Llegada->Caption = llegada[select];
		Form1->Envejecimiento->Caption = envejecimiento[select];
		Form1->Cpu_restante->Caption = cpu_restante[select];
		Form1->Quantum_restante->Caption = quantum_restante[select];

	}
}

void imprimirEstados() {

	Form1->ListViewRunning->Items->Clear();
	Form1->ListViewBlocked->Items->Clear();
	Form1->ListViewReady->Items->Clear();

	TListItem *ListIt;
	if (!running.empty()) {
		for (int x = 0; x < running.size(); x++) {
			ListIt = Form1->ListViewRunning->Items->Add();
			ListIt->Caption = running[x];
		}
	}
	if (!blocked.empty()) {
		for (int y = 0; y < blocked.size(); y++) {
			ListIt = Form1->ListViewBlocked->Items->Add();
			ListIt->Caption = blocked[y];
		}
	}

	if (!ready.empty()) {
		for (int w = 0; w < ready.size(); w++) {
			ListIt = Form1->ListViewReady->Items->Add();
			ListIt->Caption = ready[w];
		}
	}
}

void __fastcall TForm1::CambiarClick(TObject *Sender) {
	memoria++;
	switch(memoria) {
	case 1:
		t_algoritmo->Caption = "FIFO";
		break;

	case 2:
		t_algoritmo->Caption = "LRU";
		break;

	case 3:
		t_algoritmo->Caption = "LFU";
		break;

	case 4:
		t_algoritmo->Caption = "NUR";
		break;

	case 5:
		t_algoritmo->Caption = "FIFO";
		memoria = 1;
		break;
	}

	t_actual++;

	sumaEnvejecimiento();
	muestraDespliegue();

	tiempo_Actual->Caption = t_actual;

}
// ---------------------------------------------------------------------------

void __fastcall TForm1::CambiarAClick(TObject *Sender) {
	cpu++;
	switch(cpu) {
	case 1:
		cpu_algoritmo->Caption = "FIFO";
		break;

	case 2:
		cpu_algoritmo->Caption = "Round Robin";
		break;

	case 3:
		cpu_algoritmo->Caption = "SRT";
		break;

	case 4:
		cpu_algoritmo->Caption = "HRRN";
		break;

	case 5:
		cpu_algoritmo->Caption = "FIFO";
		cpu = 1;
		break;
	}

	sumaEnvejecimiento();
	muestraDespliegue();

	t_actual++;

	tiempo_Actual->Caption = t_actual;
}
// ---------------------------------------------------------------------------

/*
VIEJO DESPLEGAR RUNNING
VIEJO DESPLEGAR RUNNING
VIEJO DESPLEGAR RUNNING
void desplegarRunning(){
Form1->ListView1->Items->Clear();
TListItem *ListIt;

for (int z = 0; z < proceso.size(); z++) {
for (int x = 0; x < proceso.at(z).size(); x++) {
ListIt = Form1->ListView1->Items->Add();
ListIt->Caption = x;
for (int y = 0; y < 6; y++) {
ListIt->SubItems->Add(proceso[z][x][y]);
}
}
}
}
VIEJO DESPLEGAR RUNNING
VIEJO DESPLEGAR RUNNING
VIEJO DESPLEGAR RUNNING
 */

void llenarInicial() {
	ifstream archivo("input.txt");
	// ----------------VARIABLES--GLOBALES------------------------
	max_pa; // NÚMERO MÁXIMO DE PÁGINAS EJECUTÁNDOSE POR PROCESO.
	t_actual; // TIEMPO ACTUAL DEL RELOJ.
	// ----------------VARIABLES--GLOBALES------------------------

	// ----------------VARIABLES--LOCALES------------------------
	int pags = 0; // CANTIDAD DE PÁGINAS POR PROCESOS.
	int proc = 0; // NÚMERO DE PROCESOS.
	int dato = 0; // SE USA PARA ALMACENAR LOS NÚEROS Y SE DECIDE SI SE USAN O NO.
	int llegada_local = 0; // SE USA PARA RECIBIR EL DATO DE LLEGADA
	int tTotal = 0; // SE USA PARA RECIBIR EL DATO DEL TIEMPO TOTAL
	int estado = 0; // SE USA PARA RECIBIR EL DATO DEL ESTADO EN QUE SE ENCUENTRA DENTRO DEL ARCHIVO
	String c; // ESTA VARIABLE SERÁ LA QUE SE EVALÚE SI ES COMA O NO.
	// ----------------VARIABLES--LOCALES------------------------

	if (!archivo.is_open()) {
		ShowMessage("ERROR DE LECTURA");
	}

	archivo >> max_pa;
	c = archivo.get();
	if (c != ",") {
		archivo >> t_actual;
	}
	archivo >> proc;

	nuevo_proceso = proc + 1;

	// CICLO PARA DAR VUELTAS A CADA DATO DE LOS PROCESOS
	for (int p = 1; p <= proc; p++) {

		// LLENADO DE VECTORES CON VALORES ESTATICOS
		envejecimiento.push_back(0);
		cpu_restante.push_back(0);
		quantum_restante.push_back(5);
		// LLENADO DE VECTORES CON VALORES ESTATICOS

		// CICLO PARA AGARRAR LOS TRES DATOS DE CPU DE CADA PROCESO
		// llegada, tiempo total estimado, y estado (1-running, 2-blocked, 3-ready)
		for (int d = 0; d < 3; d++) {
			c = archivo.get();
			if (c != ",") {
				archivo >> dato;
				if (d == 0) {
					llegada_local = dato;
					llegada.push_back(llegada_local);
				}
				if (d == 1) {
					tTotal = dato;
					tiempo_total.push_back(tTotal);
				}
				if (d == 2) {
					estado = dato;
					if (estado == 1) {
						running.push_back(p);
					}
					if (estado == 2) {
						blocked.push_back(p);
					}
					if (estado == 3) {
						ready.push_back(p);
					}
				}
			}
		}

		archivo >> pags;

		//
		// CICLO DE LLENADO DE VECTORES UNI, BI Y TRIDIMENSIONAL
		//
		for (int pag = 0; pag < pags; pag++) {
			for (int num = 0; num < 6; num++) {
				c = archivo.get();
				if (c != ",") {
					archivo >> dato;
					fila.push_back(dato);
					if (num == 6) {
						fila.push_back(0);
					}
				}
			}
			pagina.push_back(fila);
			fila.clear();
		}
		proceso.push_back(pagina);
		pagina.clear();
	}
	archivo.close();
}

// ---------------------------------------------------------------------------

void __fastcall TForm1::FormCreate(TObject *Sender) {
	/////////////////////////*Tamaño de quantum*/////////////////////////
	UpDown1->Min = 1;
	UpDown1->Max = 255;
	UpDown1->Associate = AsignacionQuantum;

	/////////////////////////*Páginas*///////////////////////////////////
	UpDown2->Min = 1;
	UpDown2->Max = 255;
	UpDown2->Associate = Paginas;

	/////////////////////////*Ejecución Total*///////////////////////////
	UpDown3->Min = 1;
	UpDown3->Max = 255;
	UpDown3->Associate = EjecucionTotal;

	llenarInicial();
	desplegarRunning();

	// LLENADO DEL COMBOBOX DE LOS PROCESOS
	for (int x = 1; x <= proceso.size(); x++) {
		Procesos->Items->Add(x);
	}

	// LLENADO DEL COMBOBOX DE INTERRUPCIONES
	Interrupciones->Items->Add("SVC Terminación normal y anormal");
	Interrupciones->Items->Add("SVC Solicitud I/O");
	Interrupciones->Items->Add("Externa Quantum Expirado");
	Interrupciones->Items->Add("Dispositivo de I/O");

	nuevoProcesoNombre->Caption = nuevo_proceso;
	tiempo_Actual->Caption = t_actual;
	ListView1->ViewStyle = vsReport;
	ListViewRunning->ViewStyle = vsReport;
	ListViewBlocked->ViewStyle = vsReport;
	ListViewReady->ViewStyle = vsReport;

	imprimirEstados();

	/*
	//POR CUIESTIA DE PDUFIA
	Label15->Caption = proceso[0][0][0];
	Label16->Caption = proceso[0][0][0];
	Label17->Caption = proceso[0][0][0];
	Label18->Caption = proceso[0][0][0];
	Label19->Caption = proceso[0][0][0];
	 */
}

void __fastcall TForm1::DesplegarClick(TObject *Sender) {
	t_actual++;

	// VARIABLES LOCALES
	int select = (Procesos->Text.ToInt()) - 1;
	proceso_desplegado = select;
	// VARIABLES LOCALES

	Nombre->Caption = Procesos->Text.ToInt();
	Llegada->Caption = llegada[select];
	Envejecimiento->Caption = envejecimiento[select];
	Cpu_restante->Caption = cpu_restante[select];
	Quantum_restante->Caption = quantum_restante[select];

	// CICLO PARA LAS PAGINAS DE CADA PROCESO
	for (int z = 0; z < proceso.size(); z++) {
		if (Procesos->Text.ToInt() == (z + 1)) {
			Pagina->Items->Clear();
			for (int x = 0; x < proceso.at(z).size(); x++) {
				Pagina->Items->Add(x);
				// AÚN NO SE USARÁ EL SIGUIENTE CICLO, PERO, ES PARA DESPLEGAR
				// CADA DATO DEL ARREGLO BIDIMENSIONAL DE MANERA INDIVIDUAL
				/*
				for (int y = 0; y < 6; y++) {
				ListIt->SubItems->Add(arr[z][x][y]);
				if (y == 1 && arr[z][x][y] > llegadaMax) {
				llegadaMax = arr[z][x][y];
				}
				}
				 */
			}
		}
	}
	// CICLO PARA LAS PAGINAS DE CADA PROCESO
	sumaEnvejecimiento();
	tiempo_Actual->Caption = t_actual;
}

// ---------------------------------------------------------------------------
void readyArunning() {
	if (running.empty()) {
		running.push_back(ready[0]);
		for (int x = 0; x < ready.size() - 1; x++) {
			ready[x] = ready[x + 1];
		}
		ready.pop_back();
	}
}

void __fastcall TForm1::InterrumpirClick(TObject *Sender) {
	t_actual++;

	if (Interrupciones->Text == "SVC Terminación normal y anormal") {
		// El proceso se elimina de running, no regresa a ready.
		running.pop_back();
		// sincronizar();
		// if(!running.empty()) {
		readyArunning(); // }
		imprimirEstados();
	}
	if (Interrupciones->Text == "SVC Solicitud I/O") {
		// READY A BLOCKED
		blocked.push_back(running[0]);
		for (int x = 0; x < running.size() - 1; x++) {
			running[x] = running[x + 1];
		}
		running.pop_back();

		imprimirEstados();
	}
	if (Interrupciones->Text == "Externa Quantum Expirado") {
		// El proceso en running regresa a ready.
		ready.push_back(running[0]);
		running.pop_back();

		imprimirEstados();
	}
	if (Interrupciones->Text == "Dispositivo de I/O") {
		// El primer proceso bloqueado regresa a ready
		if (!blocked.empty()) {
			ready.push_back(blocked[0]);
			for (int x = 0; x < blocked.size() - 1; x++) {
				blocked[x] = blocked[x + 1];
			}
			blocked.pop_back();
		}
		else {
			ShowMessage("No hay procesos en Blocked");
			// ShowMessage(max);
			return;
		}
		imprimirEstados();
		// ShowMessage("No hay Procesos en Blocked");

	}
	sumaEnvejecimiento();
	muestraDespliegue();
	tiempo_Actual->Caption = t_actual;
}
// ---------------------------------------------------------------------------

void __fastcall TForm1::ReseteoClick(TObject *Sender) {
	t_actual++;
	sumaEnvejecimiento();

	muestraDespliegue();
	tiempo_Actual->Caption = t_actual;
}
// ---------------------------------------------------------------------------

void __fastcall TForm1::CrearClick(TObject *Sender) {
	int total_paginas = Paginas->Text.ToInt();
	int tiempo_ejecucion = EjecucionTotal->Text.ToInt();
	int tiempo_llegada = tiempo_Actual->Caption.ToInt();
	int quantum = AsignacionQuantum->Text.ToInt();
	nuevo_proceso;
	for (int x = 0; x < total_paginas; x++) {
		for (int y = 0; y < 6; y++) {
			fila.push_back(0);
			if (y == 6) {
				fila.push_back(0);
			}
		}
		pagina.push_back(fila);
		fila.clear();
	}
	proceso.push_back(pagina);
	pagina.clear();

	//SE DESPLIEGAN TODOS LOS PROCESOS QUE NO HAYAN SIDO TERMINADOS
	//CON EL NUEVO PROCESO CREADO
	//
	Procesos->Clear();
	for (int x = 1; x <= proceso.size(); x++) {
		Procesos->Items->Add(x);
	}
	//
	//SE DESPLIEGAN TODOS LOS PROCESOS QUE NO HAYAN SIDO TERMINADOS
	//CON EL NUEVO PROCESO CREADO

	ready.push_back(nuevo_proceso);

	llegada.push_back(tiempo_llegada);

	//CPU ASIGNADO, AÚN NO LO VEMOS...CREO cpuasi.push_back(0);

	envejecimiento.push_back(0);

	cpu_restante.push_back(0);

	quantum_restante.push_back(quantum);

	tiempo_total.push_back(tiempo_ejecucion);

	t_actual++;

	imprimirEstados();
	sumaEnvejecimiento();
	muestraDespliegue();
	nuevo_proceso++;
	tiempo_Actual->Caption = t_actual;
}
// ---------------------------------------------------------------------------

void __fastcall TForm1::EjecutarClick(TObject *Sender) {
	t_actual++;
	sumaEnvejecimiento();
	muestraDespliegue();
	tiempo_Actual->Caption = t_actual;
}
// ---------------------------------------------------------------------------